source("D:/workspace/code_challenge/masoom-r/homework7/hw7-problem1.r", encoding = 'UTF-8')
#install.packages("jsonlite")
#install.packages("RSQLite")
library(jsonlite)
library(RSQLite)
#setwd( "./masoom-r/homework7/" )
getwd()
con <- dbConnect(RSQLite::SQLite(), "PlanetData.db")
print(con)
# b. List the tables in the database, using dbListTables(), and print out the result. You should see only one table.
print(dbListTables(con))
# c. Load that table using dbReadTable(). The name should be “PlanetMass”. This should return a dataframe. Assign it to a variable named planetSQL.
planetSQL = dbReadTable(con, "PlanetMass")
# d. Disconnect from the database using dbDisconnect().
dbDisconnect(con)
# e. Print the contents of planetSQL.
planetSQL
# 2. Now we want to convert the dataframe to a JSON object.
# a. Use the toJSON() function convert planetSQL into JSON code. Name the variable containing the code outJSON.
outJSON <- toJSON(planetSQL)
# b. Write out outJSON using the writeLines() function, with a filename of “planet.json”.
writeLines(outJSON,con="planet.json")
# c. Use the readLines() function to read the file “planet.json”. Name the variable containing the code incomingJSON.
incomingJSON = readLines("planet.json")
# d. Use the fromJSON() function to parse the JSON code in the incomingJSON variable into a dataframe. Name the dataframe planetJSON.
planetJSON = fromJSON(incomingJSON)
# e. Print out the contents of planetJSON.
planetJSON
# 3. We want to convert the dataframe to a CSV file at this point.
# a. Use the write.table() function to write out the planetJSON dataframe to a file named “planet.csv”.
write.table(planetJSON,"planet.csv")
# b. Use the read_delim() function to read in a datatable (data.table) from the file named “planet.csv”. Store it in a variable named planetDataTable.
planetDataTable = read.delim("planet.csv")
# c. Print out planetDataTable, as well as the class of the variable. Note that it is not a dataframe, but is instead a related class.
planetDataTable
class(planetDataTable)
# d. Use the read.table() function to read “planet.csv” a second time. Store it in a variable named planetCSV.
planetCSV = read.csv("planet.csv")
# e. Print out planetCSV. Note that this one is a dataframe.
planetCSV
install.packages("readxl")
install.packages("scales")
install.packages("scales")
install.packages("ggplot2")
install.packages("jsonlite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("jsonlite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("readxl")
install.packages("ggplot2",dependencies = TRUE)
getwd()
# install.packages("readxl")
# install.packages("ggplot2") # requires installing rtools
library(readxl)
library(ggplot2)
# 1. Load this file into a dataframe using the read_excel() function. Assign it to a variable named BeaverData.
BeaverData = read_excel("BeaverData.xlsx")
# 2. Print the contents of BeaverData.
BeaverData
# 3. Using ggplot2, create a plot that makes a line of best fit (regression line), as shown in class.
# The x should be time, and the y should be temp (short for temperature).
# Coloration is not required. You should include the data points (either the jitter points, or just regular points).
# The method should be the linear model (“lm” method).
ggplot(faithful, aes(x = eruptions, y = waiting))
# 2. Print the contents of BeaverData.
BeaverData
# 3. Using ggplot2, create a plot that makes a line of best fit (regression line), as shown in class.
# The x should be time, and the y should be temp (short for temperature).
# Coloration is not required. You should include the data points (either the jitter points, or just regular points).
# The method should be the linear model (“lm” method).
ggplot(BeaverData, aes(x = time, y = temp))
# 3. Using ggplot2, create a plot that makes a line of best fit (regression line), as shown in class.
# The x should be time, and the y should be temp (short for temperature).
# Coloration is not required. You should include the data points (either the jitter points, or just regular points).
# The method should be the linear model (“lm” method).
ggplot(BeaverData, aes(day = time, y = temp))
# 3. Using ggplot2, create a plot that makes a line of best fit (regression line), as shown in class.
# The x should be time, and the y should be temp (short for temperature).
# Coloration is not required. You should include the data points (either the jitter points, or just regular points).
# The method should be the linear model (“lm” method).
ggplot(BeaverData, aes(day = time, y = temp))
# 3. Using ggplot2, create a plot that makes a line of best fit (regression line), as shown in class.
# The x should be time, and the y should be temp (short for temperature).
# Coloration is not required. You should include the data points (either the jitter points, or just regular points).
# The method should be the linear model (“lm” method).
ggplot(BeaverData, aes(x = time, y = temp))
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# 3. Using ggplot2, create a plot that makes a line of best fit (regression line), as shown in class.
# The x should be time, and the y should be temp (short for temperature).
# Coloration is not required. You should include the data points (either the jitter points, or just regular points).
# The method should be the linear model (“lm” method).
ggplot(BeaverData, aes(x = time, y = temp)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
# 3. Using ggplot2, create a plot that makes a line of best fit (regression line), as shown in class.
# The x should be time, and the y should be temp (short for temperature).
# Coloration is not required. You should include the data points (either the jitter points, or just regular points).
# The method should be the linear model (“lm” method).
ggplot(BeaverData, aes(x = time, y = temp)) + geom_point()
# 3. Using ggplot2, create a plot that makes a line of best fit (regression line), as shown in class.
# The x should be time, and the y should be temp (short for temperature).
# Coloration is not required. You should include the data points (either the jitter points, or just regular points).
# The method should be the linear model (“lm” method).
ggplot(BeaverData, aes(x = time, y = temp)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
# 4. Using ggplot2, create a line plot that makes a (very jagged)
# line connecting observations. As with the prior problem,
# the x should be time and the y should be temp.
ggplot(BeaverData, aes(x = time, y = temp)) + geom_line()
